// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: grpc/proto/album.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcAlbum_GetAlbum_FullMethodName    = "/grpc.GrpcAlbum/GetAlbum"
	GrpcAlbum_GetAlbums_FullMethodName   = "/grpc.GrpcAlbum/GetAlbums"
	GrpcAlbum_CreateAlbum_FullMethodName = "/grpc.GrpcAlbum/CreateAlbum"
)

// GrpcAlbumClient is the client API for GrpcAlbum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcAlbumClient interface {
	GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*Album, error)
	GetAlbums(ctx context.Context, in *GetAlbumsRequest, opts ...grpc.CallOption) (*GetAlbumsResponse, error)
	CreateAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Album, error)
}

type grpcAlbumClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcAlbumClient(cc grpc.ClientConnInterface) GrpcAlbumClient {
	return &grpcAlbumClient{cc}
}

func (c *grpcAlbumClient) GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, GrpcAlbum_GetAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcAlbumClient) GetAlbums(ctx context.Context, in *GetAlbumsRequest, opts ...grpc.CallOption) (*GetAlbumsResponse, error) {
	out := new(GetAlbumsResponse)
	err := c.cc.Invoke(ctx, GrpcAlbum_GetAlbums_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcAlbumClient) CreateAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Album, error) {
	out := new(Album)
	err := c.cc.Invoke(ctx, GrpcAlbum_CreateAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcAlbumServer is the server API for GrpcAlbum service.
// All implementations must embed UnimplementedGrpcAlbumServer
// for forward compatibility
type GrpcAlbumServer interface {
	GetAlbum(context.Context, *GetAlbumRequest) (*Album, error)
	GetAlbums(context.Context, *GetAlbumsRequest) (*GetAlbumsResponse, error)
	CreateAlbum(context.Context, *Album) (*Album, error)
	mustEmbedUnimplementedGrpcAlbumServer()
}

// UnimplementedGrpcAlbumServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcAlbumServer struct {
}

func (UnimplementedGrpcAlbumServer) GetAlbum(context.Context, *GetAlbumRequest) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedGrpcAlbumServer) GetAlbums(context.Context, *GetAlbumsRequest) (*GetAlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbums not implemented")
}
func (UnimplementedGrpcAlbumServer) CreateAlbum(context.Context, *Album) (*Album, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedGrpcAlbumServer) mustEmbedUnimplementedGrpcAlbumServer() {}

// UnsafeGrpcAlbumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcAlbumServer will
// result in compilation errors.
type UnsafeGrpcAlbumServer interface {
	mustEmbedUnimplementedGrpcAlbumServer()
}

func RegisterGrpcAlbumServer(s grpc.ServiceRegistrar, srv GrpcAlbumServer) {
	s.RegisterService(&GrpcAlbum_ServiceDesc, srv)
}

func _GrpcAlbum_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcAlbumServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcAlbum_GetAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcAlbumServer).GetAlbum(ctx, req.(*GetAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcAlbum_GetAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcAlbumServer).GetAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcAlbum_GetAlbums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcAlbumServer).GetAlbums(ctx, req.(*GetAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcAlbum_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcAlbumServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcAlbum_CreateAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcAlbumServer).CreateAlbum(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcAlbum_ServiceDesc is the grpc.ServiceDesc for GrpcAlbum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcAlbum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.GrpcAlbum",
	HandlerType: (*GrpcAlbumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlbum",
			Handler:    _GrpcAlbum_GetAlbum_Handler,
		},
		{
			MethodName: "GetAlbums",
			Handler:    _GrpcAlbum_GetAlbums_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _GrpcAlbum_CreateAlbum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/album.proto",
}
